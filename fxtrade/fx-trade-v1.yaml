openapi: 3.0.0

info:
  title: FX Trade API
  version: 1.0.0
  x-apiType: open
  description: |-
    # Overview

    Perform foreign exchange transactions, obtain indicative rates, and retrieve
    trades performed.

    The API provides the ability to retrieve a quote and/or
    place an order for an FX spot and outright (Today, Tomorrow and ASAP).

    ## Introduction

    FX Trade is a set of APIs that enable you to perform foreign exchange
    transactions, obtain indicative rates, and retrieve trades performed.

    The API provides the ability to retrieve a quote and place an order for an FX spot and
    outright.

    A sandbox environment is available to develop and test your application.



    ## Getting Access

    To gain access to the FX Trade API:

    1. Register and create an account on the ABN AMRO Developer Portal,
       [click here to register](/user/register).
    1. Log in to your account. [Click here to login](/user/login).
    1. Create an app, subscribe to the FX Trade API Product, and get API
       credentials. [Click here to create an app](/user/me/apps).
    1. Start developing. For more information, see [Sandbox](sandbox),
       [Technical](technical) and [Tutorial](tutorials).


    ## Get Access to Production
    To get access to the production environment:

    * Submit your public key from your private/public key pair:
      1. To launch the form, [click here](/contact).
      1. In the **API Product** field, select
         **Foreign Exchange**.
      1. In the **Support category** field, select
         **Certificates and Authentication**.
      1. In the **Subject** field, enter the name of your application and request
         access, in the following format:
         `<Application name>: request for access to production`.
      1. In the **Email** field, use the same developer e-mail that you used when
           setting up your application.
      1. In the **Message** field, paste the public key in PEM format.
      1. Fill in the remaining fields, and click **Send**.

    * If you are already using ABN AMRO's Treasury services, use one of the
      following methods to contact our eFX sales team:
      * Phone: +31 (0)20 383 6606
      * Web form:
        1. To launch the form, [click here](/contact).
        1. In the **API Product** field, select **FX Trade**.
        1. In the **Support Category** field, select **Sales and Business**.
        1. Fill in your details, add a message, and click **Send**.

    * If you are new to ABN AMRO, or do not make use of our Treasury services,
      contact our Treasury Sales Support team on +31 (0)20 383 6036


    ## Definitions

    **Spot:** an agreement between two parties to buy one currency against
    selling another at an agreed price for settlement on the spot date. In
    general, the spot date is two business days after the trade date. However,
    some currencies can be one business day after the trade date.

    **Outright:** an agreement between two parties to buy one currency against
    selling another at an agreed price for settlement on any other day then the
    spot date. When an outright with a value of `TODAY` is traded, settlement
    must take place on the same day. If an outright with a value of `TOMORROW`
    is traded, it will take place the following business day.

    **Forward:** an outright for which the settlement takes place beyond the
    spot date.

    **Settlement date:** the date on which the transfer of money in the
    transaction is completed, and currency accounts are debited or credited. For
    the foreign exchange instruments provided throughout this API this is
    to the `Value date`.

    >**Note:** both `Settlement date` and `Value date` refer to the date as
    observed by the FX API service provider.


    ### Generic behavior

    In foreign exchange trading, it may not be possible to price or execute an
    order directly. In some circumstances this may take some time.

    To ensure that response times are in a predictable range the POST methods
    for `POST /v1/fxtrade/quotes` and `POST /v1/fxtrade/orders` queries have a
    `maxWaitTime` query parameter. This parameter is used to control whether or
    not the request should return a non-final state if the time has elapsed.

    For pricing a quote, or executing an order, the response time for
    non-intervention cases is expected to be below 200ms, therefore, the
    default value for the `maxWaitTime` query parameter is set to 500ms. This
    value can be overridden.

    If the returned quoted, or order, does not have a final state
    `GET /v1/fxtrade/quotes/{quoteId}` and `GET /v1/fxtrade/orders/{orderId}`
    can be invoked repeatedly to retrieve the status.

    ### Life cycle of a quote

    A quote has its own life cycle, the state of the quote is defined by the
    `QuoteStatus`. The following states are available to a client:

    | Status | Description |
    | ------ | ----------- |
    | NEW | a quote request has been submitted, but it has not been processed by the broker |
    | PENDING_NEW | a quote request has been received by the broker, but it has not been priced or rejected |
    | REJECTED | a quote request has been rejected, expect a reason for the rejection |
    | QUOTED | a quote has been provided |
    | EXPIRED | a quote was provided but it has expired |

    The following state transition will take place for each quote:

        NEW -> PENDING_NEW
        PENDING_NEW -> QUOTED
        PENDING_NEW -> REJECTED
        QUOTED -> EXPIRED

    When requesting a quote using `POST /v1/fxtrade/quote`, that returns a
    status of `NEW` or `PENDING_NEW`, a `GET /v1/fxtrade/quotes/{quoteId}`
    request should be performed to check for updates to the quote state. If the
    expiration date-time of the quote is reached, the status will change from
    `QUOTED` to `EXPIRED`.

    ### Life cycle of an order

    An order has its own life cycle, the state of the order is defined by the
    `OrderStatus`. The following states are available to a client:

    | Status| Description |
    | ----- | ----------- |
    | NEW | an order request has been submitted, but it has not been processed by the broker |
    | PENDING_NEW | an order request has been received by the broker, but it has not been executed or rejected |
    | FILLED | the order has been filled |
    | REJECTED | the order is rejected, expect a reason for the rejection |
    | REJECTED_EXPIRED | the order is rejected. The quote used in the order request has expired |

    The following state transition takes place for each order:

        NEW -> PENDING_NEW
        PENDING_NEW -> FILLED
        PENDING_NEW -> REJECTED
        PEDNING_NEW -> REJECTED_EXPIRED

    When requesting an order using `POST /v1/fxtrade/orders`, that returns a
    status of `NEW` or `PENDING_NEW`, a `GET /v1/fxtrade/quotes/{orderId}`
    request should be performed to check for updates to the order state.

    ### Reporting operations

    The reporting operations `GET /v1/fxtrade/quotes` and
    `GET /v1/fxtrade/orders` will return a complete result set, however, if the
    response body is large pagination will occur. If this occurs, the response
    contains the `nextPageKey` property which can be used in a subsequent query
    to obtain the next page.


    # Sandbox

    The sandbox environment is functionally identical to production, the technical
    and authorization documentation applies to both environments.

    The sandbox environment enables you to trigger scenarios where you can develop
    and test your code against all possible outcomes and HTTP status codes.

    Quotes stay tradable for 90 seconds, which is substantially longer than
    production. Quotes and orders created in the sandbox environment will be purged
    after 14 days or when the number exceeds 5000.

    ## Access

    To access to the Sandbox, see [overview](overview#getting-access). The sandbox
    environment is located at:
    [https://api-sandbox.abnamro.com](https://api-sandbox.abnamro.com).

    For ease of use, we provide a private/public key pair that can be used to get an
    access token from the authentication endpoint. The private/public key can be
    used for other API products in sandbox as well and represents the method of how
    to obtain an access token in production.

    For convenience a PKCS#12 keystore is provided that contain the private and
    public key (no passwords set):

    | Client authentication files |
    | -------- | --- |
    | Download | [Private key file](apiclient.key) |
    | Download | [Public certificate file](apiclient.crt) |
    | Download | [PKCS#12 keystore](apiclient.p12) |

    Next to the production way of obtaining an access token, we provide for sandbox
    an easier way to get a token via basic authentication (id=`FXAPI`,
    password=`FXAPI`). Find below the example request for getting an access token
    for all possible operations for the FX Trade API:
    ```
    curl -u FXAPI:FXAPI \
         -X POST https://auth-sandbox.connect.abnamro.com/as/token.oauth2 \
         -d 'grant_type=client_credentials&scope=fxtrade:allowedcurrencypairs:read fxtrade:settlementaccountgroups:read fxtrade:rates:read fxtrade:quotes:read fxtrade:quotes:write fxtrade:orders:read fxtrade:orders:write'
    ```
    >**Note:** once you passed basic testing you are advised to switch to TLS-MA
    for obtaining the access token as that represents the mechanism used in
    production.

    ## Supported currency pairs

    In the sandbox environment, the following currency pairs are available and can
    be traded, this applies to the inverse pair. Each currency pair has a cutoff
    time in UTC that dictates whether settlement for the tenor `TODAY` can still
    take place. For all currencies, official bank-holidays are observed. It is
    possible to trade a currency pair for which a cross can be performed.

    | Currency Pair| Cutoff (UTC) |
    | --- | --- |
    | EURUSD | 16:00 |
    | USDJPY | 16:00 |
    | GBPUSD | 16:00 |
    | AUDUSD | 16:00 |
    | USDCHF | 13:30 |
    | NZDUSD | 16:00 |
    | USDCAD | 17:00 |
    | EURRON | 10:30 |
    | USDMXN | 16:00 |

    ## Supported settlement account groups

    When performing an FX order the settlement account group must be provided. In
    production this determines the currency accounts to be used in the settlement
    of a sum of money. In sandbox the following settlement accounts groups are
    supported: `Client Account`, `House Account`.

    ## Supported outcomes of operations

    We differentiate between the following 3 types of outcomes for operations in the
    sandbox environment:

    - Successful: the operations that return a response that contains a `2xx`
      status code, and which do not fall in the category 'partially successful'
    - Partially successful:  the POST operations for a quote or order that return a
      response that contains a `2xx` status code, but for which the status of the
      quote or order returned is not considered 'final'. The client must perform a
      GET operation to find out whether the quote or order status reaches a final
      state
    - Unsuccessful: the operations that return a response that contains a `4xx` or
     `5xx` status code

    ### Partially successful operations

    The following section describes how to trigger and test for partially successful
    operations.

    #### Slow responses

    In general, all responses to POST requests for an FX quote or order that do not
    go into intervention, will return within 200 ms. To simulate a slow response,
    one out of ten POST requests in the sandbox will provide a response time
    in-between 200 and 1500 ms. Use this feature combined with the optional
    `maxWaitTime` query parameter, that is smaller than 1500, to test for the
    scenario where the response does not contain the final state.

    #### Intervention

    When requesting an FX quote for which the buy or sell amount exceeds 100.000,-
    intervention will be triggered, this is regardless of the currency pair
    involved. The time it takes for the intervention to result in either a
    `REJECTED` or `QUOTED` status will be between 5 and 90 seconds. For each
    intervention one out of five interventions will result in a status of
    `REJECTED`, the others will result in a `QUOTED` status.

    #### Rejection

    Performing an FX quote request for the tenor `TODAY` after the cutt-off time has
    been reached for the currency pair used, will result in a status of `REJECTED`.

    ### Unsuccessful operations

    Most client errors, i.e. a response with a `4xx` status code, can be triggered
    by providing an illegal request, wrong request headers, or the wrong token as
    documented in [Technical](technical). To trigger other HTTP return codes, such
    as 429, 500 and 503 see the sections below.

    #### 429 Too Many Requests

    When requests are executed in a way that exceeds certain thresholds, a response
    with the 429 status code will be returned. This can be triggered in the sandbox
    environment by requesting indicative rates with a frequency of one request per
    5 seconds for a prolonged period.

    #### 500 Internal Server Error

    A response with this status code is not likely to occur in production, but can
    be triggered in the sandbox environment by requesting an FX quote that involves
    the currencies 'MXN' and 'CHF'.

    #### 503 Service Unavailable

    In circumstances where the service is not able to handle an incoming request
    and the expectation is that the underlying cause will be solved in short notice.
    In these circumstances the 503 status code will be returned in the response.
    The response will also contain the `Retry-After` header as specified in
    [RFC 7231](https://tools.ietf.org/html/rfc7231#section-7.1.3) and its value will
    be set to the number of seconds in which the service is expected to be available
    again.

    This scenario can be triggered by requesting an FX quote that involves the
    currencies 'MXN' and 'RON'.

    # Tutorial

    This tutorial describes the functionality of the FX Trade API and also how to
    connect to the sandbox environment. For additional information, see
    [Technical](technical).

    - To download the OAS 3.0 FX Trade API, in .YAML format, click
      [here](fxtrade-v1.yaml)
    - To view the reference content and understand the full semantics of this
      service, open the .YAML file in a tool such as
      [Swagger Editor](https://editor.swagger.io/)
    - In this tutorial we will show how to invoke the service with
      [curl](https://curl.haxx.se/).

    >**Important:** before starting this tutorial, you must complete everything
    mentioned in the [Getting Started](overview#getting-access) section of the
    Overview.

    In this tutorial, you are a developer of fictional company called FxConversion.

    The company FxConversion provides a foreign exchange payment service to small
    business through multiple channels.

    FxConversion does not want to be exposed to currency risks itself and wants to
    hedge their client transactions immediately with ABN AMRO. Their internal
    systems are connected to the FX Trade API.

    ## Getting an access token

    To invoke an API you must obtain an access token. The token obtained, together
    with the API key that you obtained from the developer portal during onboarding
    for sandbox, is required for every call to the FX Trade API.

    The easiest way to obtain an access token in sandbox, is to use the basic
    authentication mechanism. To use the basic authentication mechanism, execute the
    following:
    ```
    curl -u FXAPI:FXAPI \
         -X POST https://auth-sandbox.connect.abnamro.com/as/token.oauth2 \
         -d 'grant_type=client_credentials&scope=fxtrade:allowedcurrencypairs:read fxtrade:settlementaccountgroups:read fxtrade:rates:read fxtrade:quotes:read fxtrade:quotes:write fxtrade:orders:read fxtrade:orders:write'
    ```
    To obtain an access token using certificate-based authentication, which is the
    required mechanism for production, execute the following:
    ```
    curl -v -X POST \
    https://auth-sandbox.connect.abnamro.com/as/token.oauth2 \
    --cert {location_of_sandbox_certificate} \
    --key {location_of_sandbox_private_key} \
    -d 'grant_type=client_credentials&client_id={your_client_id}&scope=fxtrade:allowedcurrencypairs:read fxtrade:settlementaccountgroups:read fxtrade:rates:read fxtrade:quotes:read fxtrade:quotes:write fxtrade:orders:read fxtrade:orders:write'
    ```
    How the private key `apiclient.key` and public certificate `apiclient.crt` are
    obtained is described in [Sandbox](sandbox#access). For a complete overview of
    all possible scopes and how to use them, see [Technical](technical#scopes).

    ### GET Allowed Currency Pairs

    As FxConversion supports transactions in multiple currencies it must verify
    whether it can trade all these currencies with ABN AMRO. If an FX conversion
    is not possible,it must contact the account manager to arrange for this.

    To determine the currency pairs that you can obtain indicative rates and perform
    currency conversions on, you must perform the following request:
    ```
    curl -X GET \
    https://api-sandbox.abnamro.com/v1/fxtrade/allowedcurrencypairs \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    You will receive a response that provides you with an array of currency pairs. A
    response may look like:
    ```
    [
      "EURUSD",
      "USDEUR",
      "USDJPY",
      "GBPUSD",
      "USDGBP",
      "EURRON"
    ]
    ```
    ### GET Settlement Account Groups

    FxConversion has many currency accounts for the same currency with ABN AMRO
    that they use for managing their cash flows. When hedging a client transaction
    they need to indicate which currency account must be debited or credited. To
    hide the burden of specifying the explicit accounts in a transaction with
    ABN AMRO, settlement account groups are setup which provide instructions on
    which accounts must be used for the settlement of a sum of money. Small
    companies will most likely have one single settlement account group only.

    To determine the settlement account groups that are set up and can be used when
    performing a currency conversion, perform the following request:
    ```
    curl -X GET \
    https://api-sandbox.abnamro.com/v1/fxtrade/settlementaccountgroups \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    You will receive a response that provides you with an array of settlement
    account group identifiers. This enables you to verify whether the setup is
    according to your expectations. A response may look like:
    ```
    [
      "Client Account",
      "House Account"
    ]
    ```
    ## GET Indicative Rates

    Clients of FxConversion want to know the exchange rates that are applicable for
    their transactions. For this purposes FxConversion publishes the rates for the
    most traded currencies on their website. To do this, they first obtain the
    indicative rates from ABN AMRO and then apply a spread to them. One way is to
    request the rate for a specific currency pair, another way is to ask for a
    collection of currency pairs. By default the indicative rates are for `SPOT`,
    but other tenors are possible, such as: `TODAY`, `TOMORROW` and `ASAP`
    (As Soon As Possible).

    The following request enables you to request the indicative rate for the EURUSD
    for `SPOT`:
    ```
    curl -X GET \
    https://api-sandbox.abnamro.com/v1/fxtrade/rates/EURUSD \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    The response contains the currency pair for the requested indicative rate, the
    bid or ask rate, mid rate, and a timestamp that indicates the moment the rate
    was calculated.It also shows the settlement date for a transaction performed at
    this moment in time. The following is an example response:
    ```
    {
      "currencyPair": "EURUSD",
      "allInRate": {
        "bidRate": 1.14346,
        "askRate": 1.14686,
        "midRate": 1.14516,
        "effectiveDateTime": "2019-04-05T10:42:31.390Z"
      },
      "settlementDate": "2019-04-09"
    }
    ```

    Use the following to request the indicative rate for the EURUSD, USDGBP, and the
    USDJPY for the tenor `TODAY`:
    ```
    curl -X GET \
    "https://api-sandbox.abnamro.com/v1/fxtrade/rates?currencyPairs=EURUSD,USDGBP,USDJPY&fxRateTenor=TODAY" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    The response will contain the indicative rates for all the requested currency
    pairs for which a indicate rate can be calculated. The following is an example
    response:
    ```
    [
      {
        "currencyPair": "EURUSD",
        "spotRate": {
          "bidRate": 1.14346,
          "askRate": 1.14686,
          "midRate": 1.14516,
          "effectiveDateTime": "2019-04-05T10:57:39.208Z"
        },
        "swapPoints": {
          "bidPoints": 0.00003,
          "askPoints": 0.00003
        },
        "allInRate": {
          "bidRate": 1.14349,
          "askRate": 1.14689,
          "midRate": 1.14519,
          "effectiveDateTime": "2019-04-05T10:57:39.370Z"
        },
        "settlementDate": "2019-04-05"
      },
      {
        "currencyPair": "USDGBP",
        "spotRate": {
          "bidRate": 0.78792,
          "askRate": 0.79029,
          "midRate": 0.78911,
          "effectiveDateTime": "2019-04-05T10:57:39.370Z"
        },
        "swapPoints": {
          "bidPoints": 0.00002,
          "askPoints": 0.00002
        },
        "allInRate": {
          "bidRate": 0.78794,
          "askRate": 0.79031,
          "midRate": 0.78913,
          "effectiveDateTime": "2019-04-05T10:57:39.370Z"
        },
        "settlementDate": "2019-04-05"
      }
    ]
    ```
    In the above response the currency pair USDJPY is not listed, because the moment
    of requesting the cutoff for today's settlement of JPY has been reached. Also
    note that the rate contains swap points and an all-in-rate because we are
    dealing with an outright.

    ## POST Quote

    The indicative rates do not represent tradable rates. Therefore, when
    FXConversion wants to hedge a transaction that it has performed with its client,
    it will ask for a quote. A quote must be requested to ensure that FXConversion
    can inspect the bid or ask price to see whether it is dealing with normal market
    conditions.

    >**Note:** FxConversion uses the quote facility in most of its channels first to
    provide a quote to its clients too.

    The following request shows a quote request for buying 25.000,- EUR while
    selling USD for the tenor `ASAP`, which means that the settlement should take
    place as soon as possible:
    ```
    curl -X POST \
    https://api-sandbox.abnamro.com/v1/fxtrade/quotes \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}" \
    -d '{
          "consumerQuoteReference": "SP_2019-04-05_131",
          "quoteRequest": {
            "buyCurrency": "EUR",
            "sellCurrency": "USD",
            "sellAmount": 25000,
            "settlement": "ASAP"
          },
          "settlementAccountGroup": "House Account"
        }'
    ```
    The response will contain the status of the quote request. If the status is
    `QUOTED` all the price details, the effective rate and the contra amount &mdash;
    which is the amount that you must pay or will be buying &mdash; as well as the
    settlement date will be available, and an order can be performed.

    The response will contain the status of the quote request. If the status is
    `QUOTED` all the price details, the effective rate and the contra amount &mdash;
    which is the amount that you must pay or will be buying &mdash; as well as the
    settlement date will be available, and an order can be performed. The following
    is an example response:
    ```
    {
      "quoteId": "0169ed41-ca23-4e5f-9e06-802b61f3ac97",
      "submittedDateTime": "2019-04-05T11:28:25.635Z",
      "quoteStatus": "QUOTED",
      "expirationDateTime": "2019-04-05T11:28:55.635Z",
      "consumerQuoteReference": "SP_2019-04-05_131",
      "buyCurrency": "EUR",
      "sellCurrency": "USD",
      "sellAmount": 25000.00,
      "settlement": "ASAP",
      "settlementAccountGroup": "House Account",
      "currencyPair": "EURUSD",
      "allInRate": {
        "bidRate": 1.1435,
        "askRate": 1.1469,
        "midRate": 1.1452,
        "effectiveDateTime": "2019-04-05T11:28:25.460Z"
      },
      "contraAmount": 21862.70,
      "rate": 1.1435,
      "settlementDate": "2019-04-09",
      "quoteSignature": "AAAAAEZHDGklAuHzbnpAT7hzXEdAGXBn2Hp9VEfdJWcot0LOSsWrprpOa+Bcn3c+vDWwEZi8y4KF0y0BOGE5edvzaqAeOgY+/PHQGeT6pudG1XgaaNRXKCmXWSW2v/cG71eXljVOHS1pb6Yug16POQ=="
    }
    ```
    When the quote status is `QUOTED`, the response will also contain the expiration
    date, and the time till when the quote is tradable. It also contains the quote
    signature, a cryptographic token that must be sent to perform an order on a
    quote.

    If a quote request is `REJECTED`, a message property will indicate the reason.
    If a system cannot provide a response on short notice, you will receive a
    `PENDING_NEW` status and will need to request for the quote status on a regular
    basis. For more information, see getting the [quote status](#get-quotes).
    Important messages that can impact your workflow are described in
    [Technical](technical).

    ## POST Order
    After analysis on the quote, FxConversion decides to trade upon it. The request
    data used in the quote must be repeated in the order request, together with the
    quote signature from the offer response, and the settlement account group
    identifier.

    The following request shows an order request for buying 25.000,- EUR while
    selling USD for the tenor ASAP and based upon the quote that has ben received
    earlier:

    >**Important:**: replace the value for the `quoteSignature` property with the
    value from the response for the quote request.

    ```
    curl -X POST \
    https://api-sandbox.abnamro.com/v1/fxtrade/orders \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}" \
    -d '{
          "consumerQuoteReference": "SP_2019-04-05_71",
          "quoteRequest": {
            "buyCurrency": "EUR",
            "sellCurrency": "USD",
            "sellAmount": 25000,
            "settlement": "ASAP"
          },
          "settlementAccountGroup": "House Account",
          "quoteSignature": "{quoteSignature}"
        }'
    ```
    If the time of submission is before the expiration time of the quote the
    response will be:
    ```
    {
      "orderId": "0169eda1-4d02-449f-a76b-a984db12919a",
      "submittedDateTime": "2019-04-05T11:28:31.125Z",
      "orderStatus": "FILLED",
      "consumerOrderReference": "SP_2019-04-05_71",
      "buyCurrency": "EUR",
      "sellCurrency": "USD",
      "sellAmount": 25000.00,
      "settlement": "ASAP",
      "settlementAccountGroup": "House Account",
      "quoteId": "0169ed41-ca23-4e5f-9e06-802b61f3ac97",
      "currencyPair": "EURUSD",
      "allInRate": {
        "bidRate": 1.1435,
        "askRate": 1.1469,
        "midRate": 1.1452,
        "effectiveDateTime": "2019-04-05T11:28:25.460Z"
      },
      "filledAmount": 25000.00,
      "contraAmount": 21862.70,
      "rate": 1.1435,
      "settlementDate": "2019-04-09"
    }
    ```
    If the quote is expired and is no longer tradable, performing an order with the
    quote signature will result in the following response:
    ```
    {
      "orderId": "0169eda1-4d02-449f-a76b-a984db12919a",
      "submittedDateTime": "2019-04-05T11:29:51.724Z",
      "orderStatus": "REJECTED_EXPIRED",
      "consumerOrderReference": "SP_2019-04-05_71",
      "buyCurrency": "EUR",
      "sellCurrency": "USD",
      "sellAmount": 25000.00,
      "settlement": "ASAP",
      "settlementAccountGroup": "House Account",
      "quoteId": "0169ed41-ca23-4e5f-9e06-802b61f3ac97"
    }
    ```

    ### GET quotes

    If the POST request for a quote results in a `PENDING_NEW` state, you can query
    the quotes endpoint to find out the current status:

    >**Important**: replace the value for the quoteId with the value you obtained
    from the quote response earlier.
    ```
    curl -X GET \
    https://api-sandbox.abnamro.com/v1/fxtrade/quotes/{quoteId} \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    The following response shows a quote that has `EXPIRED` in case it was `QUOTED`
    before:
    ```
    {
      "quoteId": "0169ed41-ca23-4e5f-9e06-802b61f3ac97",
      "submittedDateTime": "2019-04-05T11:28:25.635Z",
      "quoteStatus": "EXPIRED",
      "expirationDateTime": "2019-04-05T11:28:55.635Z",
      "consumerQuoteReference": "SP_2019-04-05_131",
      "buyCurrency": "EUR",
      "sellCurrency": "USD",
      "sellAmount": 25000.00,
      "settlement": "ASAP",
      "currencyPair": "EURUSD",
      "allInRate": {
        "bidRate": 1.1435,
        "askRate": 1.1469,
        "midRate": 1.1452,
        "effectiveDateTime": "2019-04-05T11:28:25.460Z"
      },
      "contraAmount": 21862.70,
      "rate": 1.1435,
      "settlementDate": "2019-04-09",
      "quoteSignature": "AAAAAEZHDGklAuHzbnpAT7hzXEdAGXBn2Hp9VEfdJWcot0LOSsWrprpOa+Bcn3c+vDWwEZi8y4KF0y0BOGE5edvzaqAeOgY+/PHQGeT6pudG1XgaaNRXKCmXWSW2v/cG71eXljVOHS1pb6Yug16POQ=="
    }
    ```
    If the POST request is still in the `PENDING_NEW` state it will continue to
    query the service for a final state. This will happen with a substantial
    interval, such as every two seconds, to prevent from receiving an 429 error,
    which is the 'Too Many Requests' error.

    At FxConversion they want to keep an eye on the quote requests that have been
    submitted, but not yet priced after 3 seconds. For this purpose the monitoring
    application that was developed performs the following query at a regular
    interval.

    >**Important:** to ensure appropriate response times, you must choose a parameter
    value for the `startDateTime` query that represents a short period of time, and
    is before the current time. This will limit the amount of data that is searched.
    In this example, the parameter value for the `startDateTime` query is set to
    five minutes.
    ```
    curl -X GET \
    "https://api-sandbox.abnamro.com/v1/fxtrade/quotes?quoteStatus=PENDING_NEW&startDateTime=2019-04-05T11%3A23%3A30Z" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    A response could look like the one below. It contains two records, one due to
    dealer intervention, and one for a slow response:
    ```
    {
      "records": [
        {
          "quoteId": "016a1181-094f-49f5-aa22-1a65f473239a",
          "submittedDateTime": "2019-04-05T11:28:01.125Z",
          "quoteStatus": "PENDING_NEW",
          "message": "quote went into dealer intervention as the amount exceeds EUR 10000.00",
          "consumerQuoteReference": "SP_2019-04-05_79",
          "buyCurrency": "EUR",
          "sellCurrency": "USD",
          "sellAmount": 25000.00,
          "settlement": "ASAP"
        },
        {
          "quoteId": "016a1181-28d2-4c64-8cd1-aed62b72e307",
          "submittedDateTime": "2019-04-05T11:28:28.541Z",
          "quoteStatus": "PENDING_NEW",
          "message": "quote not priced in the specified maximum wait time of '500' ms",
          "consumerQuoteReference": "SP_2019-04-05_87",
          "buyCurrency": "EUR",
          "sellCurrency": "USD",
          "sellAmount": 2500.00,
          "settlement": "ASAP"
        }
      ]
    }
    ```
    By comparing the submitted date time with your local time, assuming you are
    properly time synchronized, you can check if the quote has been submitted
    more than three seconds ago. If it has been submitted more than three seconds
    ago, it can be included in the monitoring overview.

    ### GET orders

    If the POST request for an order results in a `PENDING_NEW` state one can
    query the orders endpoint to find out the current status:

    >**Important:** replace the value for the `orderId` with the value you obtained
    from the order response earlier.
    ```
    curl -X GET \
    https://api-sandbox.abnamro.com/v1/fxtrade/orders/{orderId} \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    The response below shows that an order has been filled:
    ```
    {
      "orderId": "0169eda1-4d02-449f-a76b-a984db12919a",
      "submittedDateTime": "2019-04-05T11:28:31.125Z",
      "orderStatus": "FILLED",
      "consumerOrderReference": "SP_2019-04-05_71",
      "buyCurrency": "EUR",
      "sellCurrency": "USD",
      "sellAmount": 25000.00,
      "settlement": "ASAP",
      "settlementAccountGroup": "House Account",
      "quoteId": "0169ed41-ca23-4e5f-9e06-802b61f3ac97",
      "currencyPair": "EURUSD",
      "allInRate": {
        "bidRate": 1.1435,
        "askRate": 1.1469,
        "midRate": 1.1452,
        "effectiveDateTime": "2019-04-05T11:28:25.460Z"
      },
      "filledAmount": 25000.00,
      "contraAmount": 21862.70,
      "rate": 1.1435,
      "settlementDate": "2019-04-09"
    }
    ```
    FxConversion can use the service to generate full quote and order reports on
    demand however, by the end of each trading day they obtain all the orders
    regardless of their status and uses that for reconciliation purposes. A typical
    query to obtain this report would be:
    ```
    curl -X GET \
    "https://api-sandbox.abnamro.com/v1/fxtrade/orders?startDateTime=2019-04-05T00%3A00%3A00Z&endDateTime=2019-04-06T00%3A00%3A00Z" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    As a result it will give the orders on the day of April 5 2009:
    ```
    {
      "nextPageKey": "2019-04-05T10:43:27.719Z",
      "records": [
        {
          "orderId": "016a11cf-f3e3-45a5-8f57-a94bab405cf4",
          "submittedDateTime": "2019-04-05T08:21:02.211Z",
          "orderStatus": "FILLED",
          "consumerOrderReference": "SP_2019-04-05_1",
          "buyCurrency": "EUR",
          "sellCurrency": "USD",
          "buyAmount": 75932.00,
          "settlement": "SPOT",
          "settlementAccountGroup": "House Account",
          "quoteId": "016a11cf-f337-4318-9099-e51e958e3686",
          "currencyPair": "EURUSD",
          "allInRate": {
            "bidRate": 1.1435,
            "askRate": 1.1469,
            "midRate": 1.1452,
            "effectiveDateTime": "2019-04-05T08:21:00.607"
          },
          "filledAmount": 75932.00,
          "contraAmount": 87086.41,
          "rate": 1.1469,
          "settlementDate": "2019-04-09"
        },
        ...
        {
          "orderId": "016a11d1-656f-4d17-97ef-f642a19d5d27",
          "submittedDateTime": "2019-04-05T10:43:26.012Z",
          "orderStatus": "FILLED",
          "consumerOrderReference": "SP_2019-04-05_100",
          "buyCurrency": "CHF",
          "sellCurrency": "USD",
          "buyAmount": 29868,
          "settlement": "SPOT",
          "settlementAccountGroup": "House Account",
          "quoteId": "016a11d1-5f9f-457f-863c-c92da9f70761",
          "currencyPair": "USDCHF",
          "allInRate": {
            "bidRate": 0.9957,
            "askRate": 0.9987,
            "midRate": 0.9972,
            "effectiveDateTime": "2019-04-05T10:43:23.838Z"
          },
          "filledAmount": 29868,
          "contraAmount": 29996.99,
          "rate": 0.9957,
          "settlementDate": "2019-04-09"
        }
      ]
    }
    ```
    If the response contains a `nextPageKey` property, it indicates that the result
    set for the request is larger than what can be returned based upon the
    `pageSize` query property, which defaults to 100. The value of the
    `nextPageKey` property can be used as the value for the `nextPageKey` query
    parameter. This enables you to get the complete result set by performing
    multiple queries. An example of a subsequent query is:
    ```
    curl -X GET \
    "https://api-sandbox.abnamro.com/v1/fxtrade/orders?startDateTime=2019-04-05T00%3A00%3A00Z&endDateTime=2019-04-06T00%3A00%3A00Z&nextPageKey=2019-04-05T10%3A43%3A27.719Z" \
    -H "Accept: application/json" \
    -H "Authorization: Bearer {your_access_token}" \
    -H "API-Key: {your_api_key}"
    ```
    The above query must be repeated with a `nextPageKey` query parameter, that has
    the value from the property with the same name in the response. When the
    response no longer contains this property we know that we have the records for
    that day.

    # Release notes

    ### v.1.0.0

    #### Features
    These are the new features:
    - This
    - That
    - These
    - and
    - Those

    #### Improvements
    - This
    - That
    - These
    - and
    - Those


    #### Fixes
    - This
    - That
    - These
    - and
    - Those

    #### Depreciations
    The following functionally has been depreciated:
    - This
    - That
    - These
    - and
    - Those


servers:
  - url: 'https://api.abnamro.com/v1/fxtrade'
  - url: 'https://api-sandbox.abnamro.com/v1/fxtrade'

security:
  - apiKey: []
    bearer: []

paths:
  /allowedcurrencypairs:
    get:
      tags:
        - FxCurrencyPairList
      operationId: getAllowedCurrencyPairs
      description: |-
        Returns the currency pairs for which a spot or outright rate, quote, and
        order can be requested.
      responses:
        '200':
          description: |-
            An array of allowed currency pairs.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 999
                items:
                  $ref: '#/components/schemas/CurrencyPair'
              example:
                - EURUSD
                - EURJPY
                - USDSGD
                - USDEUR
                - SGDUSD
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /settlementaccountgroups:
    get:
      tags:
        - FxSettlementAccountGroupList
      operationId: getSettlementAccountGroups
      description: |-
        Returns the settlement account group identifiers that are used to
        control the settlement of an amount for the FX spot, or outright trade,
        on the payment accounts at settlement date.
      responses:
        '200':
          description: |-
            An array of settlement account group identifiers.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 99
                items:
                  $ref: '#/components/schemas/SettlementAccountGroup'
              example:
                - Client Account
                - House Account
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /rates:
    get:
      operationId: getFxRates
      tags:
        - FxRate
      description: |-
        Returns the FX rates for the currency pairs you specified, are allowed
        to trade, and available prices.

        The rates returned should be treated as indicative. They provide no
        guarantee that a trade, at this rate, can be performed at this moment
        in time.

        Currency pairs provided that are not included in the list returned by
        `GET /v1/fxtrade/allowedcurrencypairs` will be silently ignored.
      parameters:
        - $ref: '#/components/parameters/currencyPairs'
        - $ref: '#/components/parameters/fxRateTenor'
      responses:
        '200':
          description: |-
            An array of FX spot or outright rates.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999
                items:
                  $ref: '#/components/schemas/FxInstrumentRate'
              example:
                - currencyPair: EURUSD
                  allInRate:
                    bidRate: 1.1400
                    askRate: 1.1405
                    midRate: 1.1403
                    effectiveDateTime: '2018-11-02T09:25:43.324Z'
                  settlementDate: '2018-11-06'
                - currencyPair: EURJPY
                  allInRate:
                    bidRate: 128.53
                    askRate: 128.57
                    midRate: 128.55
                    effectiveDateTime: '2018-11-02T09:25:44.324Z'
                  settlementDate: '2018-11-06'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /rates/{currencyPair}:
    get:
      operationId: getFxRate
      tags:
        - FxRate
      description: |-
        Returns the FX spot or outright rate for the currency pair specified.

        The rate returned should be treated as indicative. It provides no
        guarantee that a trade, at this rate, can be performed at this moment in
        time.
      parameters:
        - $ref: '#/components/parameters/currencyPair'
        - $ref: '#/components/parameters/fxRateTenor'
      responses:
        '200':
          description: |-
            The indicative FX spot or outright rate.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxInstrumentRate'
              example:
                currencyPair: EURUSD
                spotRate:
                  bidRate: 1.14
                  askRate: 1.1405
                  midRate: 1.1403
                  effectiveDateTime: '2018-11-02T09:25:43.324Z'
                swapPoints:
                  bidPoints: -0.0011
                  askPoints: -0.0011
                allInRateRate:
                  bidRate: 1.1389
                  askRate: 1.1394
                  midRate: 1.1402
                  effectiveDateTime: '2018-11-02T09:25:43.325Z'
                settlementDate: '2018-11-02'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /quotes:
    post:
      operationId: createFxQuote
      tags:
        - FxQuote
      description: |-
        Submits a request for quote for an FX spot or outright.

        >**Important:** you can place one order only using a quote that is
        obtained using this method. If the same trade needs to be performed
        multiple times you must request for a quote for each trade.
      parameters:
        - name: maxWaitTime
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 5000
            default: 500
          description: |-
            The maximum amount of time, in milliseconds, that the caller is
            willing to wait for this call to return a quote in the `QUOTED` or
            `REJECTED` state. If this period elapses, and the call did not
            return a `QUOTED` or `REJECTED` state, an `FxQuote` resource with a
            `PENDING_NEW` state will be returned.

            If not within the specified range it defaults to either the minimum
            or maximum.
          required: false
      requestBody:
        description: |-
          The buy and sell currency together with the buy or sell amount and the
          tenor that defines the moment of cash settlement. An optional
          reference can be provided to correlate your request with the returned
          quote identifier.
        content:
          application/json:
            schema:
              type: object
              properties:
                consumerQuoteReference:
                  type: string
                  pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
                  maxLength: 128
                  description: |-
                    The customer reference for the FX quote request, which can
                    be used later on to correlate the quote.
                quoteRequest:
                  $ref: '#/components/schemas/FxRequest'
                settlementAccountGroup:
                  $ref: '#/components/schemas/SettlementAccountGroup'
              required:
                - quoteRequest
                - settlementAccountGroup
            example:
              consumerQuoteReference: SP-20181107-176
              quoteRequest:
                buyCurrency: JPY
                sellCurrency: EUR
                buyAmount: 1000000
                settlement: TODAY
              settlementAccountGroup: House Account
        required: true
      responses:
        '201':
          description: |-
            The quote for the FX spot or outright.
          headers:
            Location:
              schema:
                type: string
              required: true
              description: |-
                Absolute URI path to the primary resource created by the
                request.
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxQuote'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    get:
      operationId: getFxQuotes
      tags:
        - FxQuote
      description: |-
        Returns the FX spot and outright quotes that have been created.

        If multiple query parameters are provided they operate in 'AND' mode.
      parameters:
        - name: consumerQuoteReference
          in: query
          schema:
            type: string
            pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
            maxLength: 128
          description: |-
            When provided, this parameter will be assessed as to whether it is
            equal to, or a substring of, the `consumerQuoteReference` property
            in the FX quote. If it is not equal, the FX quote will be excluded
            from the result set.
          required: false
        - name: quoteStatus
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/QuoteStatus'
          style: form
          explode: false
          description: |-
            When provided the status of the FX quote must be in the provided set
            of status codes.
          required: false
        - name: startDateTime
          in: query
          schema:
            type: string
            format: date-time
          description: |-
            Defines the start of an interval (inclusive) in which the FX spot or
            outright quote has been requested. If not provided, it defaults to
            24 hours before the current moment.

            If no time zone information is provided as part of the parameter, as
            per RFC 3339, the date-time provided defaults to UTC.
          required: false
        - name: endDateTime
          in: query
          schema:
            type: string
            format: date-time
          description: |-
            Defines the end of an interval (exclusive) in which the FX spot or
            outright quote has been requested. If not provided, it defaults to
            the current moment.

            If no time zone information is provided as part of the parameter, as
            per RFC 3339, the date-time provided defaults to UTC.
          required: false
        - $ref: '#/components/parameters/nextPageKey'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: |-
            An array of FX spot and outright quotes. It is possible that an
            empty array is returned. The quotes in the result set are ordered by
            the date time they were submitted, oldest first.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextPageKey:
                    type: string
                    description: |-
                      The reference to the next page.

                      If this property is not returned, the last page has been
                      reached.
                  records:
                    type: array
                    minItems: 0
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/FxQuote'
                    description: |-
                      The Fx spot and outright quotes matching the criteria.
                required:
                  - records
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /quotes/{quoteId}:
    get:
      operationId: getFxQuote
      tags:
        - FxQuote
      description: |-
        Returns the FX spot or outright quote details for the specified quote
        ID.
      parameters:
        - $ref: '#/components/parameters/quoteId'
      responses:
        '200':
          description: |-
            The FX spot or outright quote.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxQuote'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /orders:
    post:
      operationId: createFxOrder
      tags:
        - FxOrder
      description: |-
        Submits an order for an FX spot or outright based upon a quote that has
        been obtained by a previous request for quote.

        When a spot or outright order is placed, based upon a quote that was
        obtained through a quote request, the 'quoteSignature' will be used to
        verify whether the quote is still valid and whether it was requested for
        exactly the same data. Any tampering of the `quoteSignature` will result
        in a `REJECTED` order.

        An order will be executed against exactly the same rate as has been
        communicated for the underlying quote that has not yet expired.

        Under very special circumstances it is possible to perform an order
        without obtaining a quote first, in such a case it will be executed as a
        'market order'.

        For each order, the settlement account group has to be supplied that is
        used for the purpose of trade settlement, the settlement account group
        name provided must be one that is returned by a request to
        `GET /v1/fxtrade/settlementaccountgroups`.
      parameters:
        - name: maxWaitTime
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 5000
            default: 500
          description: |-
            The maximum amount of time, in milliseconds, that the caller is
            willing to wait for this call to return an order in the `FILLED` or
            `REJECTED` state. If this period elapses, and the call did not
            return a `FILLED` or `REJECTED` state, an `FxOrder` resource with a
            `PENDING_NEW` state will be returned.

            If within the specified range it defaults to either the minimum
            or maximum.
          required: false
      requestBody:
        description: |-
          The buy and sell currency together with the buy or sell amount and the
          tenor that defines the moment of settlement as well as the
          indicator that defines the accounts to use. An optional reference can
          be provided to correlate your request with the returned order
          identifier.

          A quote signature must be provided to execute an order based upon a
          quote that has been requested.
        content:
          application/json:
            schema:
              type: object
              properties:
                consumerOrderReference:
                  type: string
                  pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
                  maxLength: 128
                  description: |-
                    The customer reference for the FX spot or outright order,
                    which can be used later on to correlate the order.
                orderRequest:
                  $ref: '#/components/schemas/FxRequest'
                settlementAccountGroup:
                  $ref: '#/components/schemas/SettlementAccountGroup'
                quoteSignature:
                  $ref: '#/components/schemas/QuoteSignature'
              required:
                - orderRequest
                - settlementAccountGroup
                - quoteSignature
            example:
              consumerOrderReference: SP-20181105-181
              orderRequest:
                buyCurrency: JPY
                sellCurrency: EUR
                buyAmount: 100000
              settlementAccountGroup: House Account
              quoteSignature: 'DET/IEOl3+ohSNqr0l1RywOkyqgjZ1JkGxxHxFkyHux6UUP71ybU6t4QWPg1dZ8NazY++v9nBP1+a3yKBRzMVK94QmwgHhWYTyO6f6iXj9VGKN2LH/qhAI2yzPz4DEAKCbc6H1ssw3yUT1QhAA=='
        required: true
      responses:
        '201':
          description: |-
            The order for the FX spot or outright.
          headers:
            Location:
              schema:
                type: string
              required: true
              description: |-
                Absolute URI path to the primary resource created by the
                request.
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxOrder'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    get:
      operationId: getFxOrders
      tags:
        - FxOrder
      description: |-
        Returns the FX spot and outright orders that have been created.

        If multiple query parameters are provided they operate in 'AND' mode.
      parameters:
        - name: consumerOrderReference
          in: query
          schema:
            type: string
            pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
            maxLength: 128
          description: |-
            When provided, this parameter will be assessed as to whether it is
            equal to, or a substring of, the `consumerOrderReference` property
            in the FX order. If it is not equal, the FX order will be excluded
            from the result set.
          required: false
        - name: orderStatus
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrderStatus'
          style: form
          explode: false
          description: |-
            When provided the status of the FX order must be in the provided set
            of status codes.
          required: false
        - name: startDateTime
          in: query
          schema:
            type: string
            format: date-time
          description: |-
            Defines the start of an interval (inclusive) in which the FX spot or
            outright order must have has been requested, if not provided it
            defaults to 24 hours before the current moment.

            If no time zone information is provided as part of the parameter, as
            per RFC 3339, the date-time provided defaults to UTC.
          required: false
        - name: endDateTime
          in: query
          schema:
            type: string
            format: date-time
          description: |-
            Defines the end of an interval (exclusive) in which the FX spot or
            outright order has been requested. If not provided, it defaults to
            the current moment.

            If no time zone information is provided as part of the parameter, as
            per RFC 3339, the date-time provided defaults to UTC.
          required: false
        - name: settlementDate
          in: query
          schema:
            type: string
            format: date
          description: |-
            The date on which the transfer of cash on the accounts will take
            place. Providing this parameter will filter out by default only the
            orders with a status of `FILLED`.
          required: false
        - $ref: '#/components/parameters/nextPageKey'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: |-
            Returns an array of FX spot and outright orders. It is possible an
            empty array is returned. The orders in the result set are ordered by
            the date time they were submitted, oldest first.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextPageKey:
                    type: string
                    description: |-
                      The reference to the next page.

                      If this property is not returned, the last page has been
                      reached.
                  records:
                    type: array
                    minItems: 0
                    maxItems: 5000
                    items:
                      $ref: '#/components/schemas/FxOrder'
                    description: |-
                      The Fx spot and outright orders matching the criteria.
                required:
                  - records
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /orders/{orderId}:
    get:
      operationId: getFxOrder
      tags:
        - FxOrder
      description: |-
        Returns the FX spot or outright order details of the specified order ID.
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: |-
            The FX spot or outright order.
          headers:
            Trace-Id:
              $ref: '#/components/headers/Trace-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxOrder'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '406':
          $ref: '#/components/responses/406'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

components:
  securitySchemes:
    bearer:
      type: http
      description: |-
        Bearer token obtained from the authentication server.
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      description: |-
        Consumer key obtained after app registration on developer portal.
      in: header
      name: API-Key

  schemas:
    Amount:
      type: number
      format: double
      minimum: 0
      exclusiveMinimum: true
      description: Represents a positive amount
      example: 10000.5
    SettlementAccountGroup:
      type: string
      minLength: 1
      maxLength: 32
      pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
      description: |-
        A settlement account group identifier used for the settlement of the
        money over payment accounts.
      example: House Account

    Currency:
      type: string
      minLength: 3
      maxLength: 3
      pattern: '^[A-Z]{3}$'
      description: An ISO 4217 currency codes of the format XXX.
      example: EUR
    CurrencyPair:
      type: string
      minLength: 6
      maxLength: 6
      pattern: '^[A-Z]{6}$'
      description: |-
        A currency pair represented by the combination of 2 ISO 4217 currency
        codes of the format XXXYYY, where XXX represents the base currency and
        YYY the quote currency. There is no separator between the base and quote
        currency. The currency pair is all capitals.
      example: EURUSD

    Settlement:
      type: string
      pattern: '^SPOT$|^TODAY$|^TOMORROW$|^ASAP$'
      default: SPOT
      description: |-
        An instruction for when the settlement of the FX instrument must take
        place.

        A value of `TODAY` indicates that settlement over the accounts
        involved must take place today.

        A value of `TOMORROW` indicates that settlement over the accounts
        involved must take place 1 business day from now. Depending on the
        currency pairs involved this may be a 'SPOT' request.

        A value of `ASAP` indicates that settlement over the accounts must take
        place as soon as possible, i.e. today and if that is not possible due to
        the daily cutoff or bank holidays the settlement must take place 1
        business day from now.
      example: SPOT

    OrderStatus:
      type: string
      description: |-
        Status of the FX spot or outright order. The status field follows the
        semantics as specified in the FIX protocol, see
        [FIX order status](https://www.onixs.biz/fix-dictionary/4.2/msgType_8_8.html)

        The status supported are a subset of those in the FIX protocol, with one
        addition of the REJECTED_EXPIRED status. The following order status
        changes can occur:

          NEW -> PENDING_NEW
          PENDING_NEW -> FILLED
          PENDING_NEW -> REJECTED
          PEDNING_NEW -> REJECTED_EXPIRED
      enum:
        - NEW               # an order request has been submitted, but it has
                            # not been processed by the broker
        - PENDING_NEW       # an order request has been received by the broker,
                            # but it has not been executed or rejected
        - FILLED            # the order has been filled
        - REJECTED          # the order is rejected, expect a reason for the
                            # rejection
        - REJECTED_EXPIRED  # the order is rejected. The quote used in the order
                            # request has expired
      example:
        FILLED

    QuoteStatus:
      type: string
      description: |-
        Status of the FX spot or outright quote. The status field follows the
        semantics as specified in the FIX protocol, see
        [FIX order status](https://www.onixs.biz/fix-dictionary/4.2/msgType_8_8.html)

        The status supported are a subset of those in the FIX protocol. The
        following order status changes can occur:

          NEW -> PENDING_NEW
          PENDING_NEW -> QUOTED
          PENDING_NEW -> REJECTED
          QUOTED -> EXPIRED
      enum:
        - NEW          # a quote request has been submitted, but it has not been
                       # processed by the broker
        - PENDING_NEW  # a quote request has been received by the broker, but it
                       # has not been priced or rejected
        - REJECTED     # a quote request has been rejected, expect a reason for
                       # the rejection
        - QUOTED       # a quote has been provided
        - EXPIRED      # a quote was provided but it has expired
      example:
        QUOTED

    QuoteSignature:
      type: string
      pattern: '^[A-Za-z0-9\/+=]+$'
      maxLength: 1024
      description: |-
        The cryptographic reference in Base64 encoding for this quote. This must
        be passed in the request payload for placing an order to ensure the
        order will be executed against the rate provided, as part of the quote,
        that is associated with this reference.

        The quote reference in combination with the buy and sell currency,
        together with either the sell or buy amount will be checked. Therefore,
        when placing an order, you must not change any of these values. Doing so
        will render an invalid request.
      example: 'DET/IEOl3+ohSNqr0l1RywOkyqgjZ1JkGxxHxFkyHux6UUP71ybU6t4QWPg1dZ8NazY++v9nBP1+a3yKBRzMVK94QmwgHhWYTyO6f6iXj9VGKN2LH/qhAI2yzPz4DEAKCbc6H1ssw3yUT1QhAA=='

    FxRate:
      type: object
      description: |-
        Describes an FX rate which can either represent a spot rate or an all-in
        rate as is used for an outright.
      properties:
        bidRate:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: |-
            Bid rate for the quoted currency in the currency pair, i.e. the rate
            the dealer is willing to pay to you for selling your base currency
            and buying the quote currency.
        askRate:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: |-
            Ask rate for the quoted currency in the currency pair, i.e. the rate
            the dealer asks to pay when buying your base currency and trading in
            the quote currency.
        midRate:
          type: number
          minimum: 0
          exclusiveMinimum: true
          description: Calculated average between the bid and ask rate.
        effectiveDateTime:
          type: string
          format: date-time
          description: |-
            Date and time the rates were published from the viewpoint of the
            service provider, the time component will include milliseconds and
            is in UTC time.
      required:
        - bidRate
        - askRate
        - effectiveDateTime
      example:
        bidRate: 128.53
        askRate: 128.57
        midRate: 128.55
        effectiveDateTime: '2018-11-02T09:25:44.324Z'

    SwapPoints:
      type: object
      description: |-
        Describes the swap points in case an instrument represents an outright.
      properties:
        bidPoints:
          type: number
          format: double
          description: |-
            The swap points that must be added to the bid spot rate and
            represent the bid all-in-rate for the outright. A positive value
            represents a premium, a negative value a discount.
        askPoints:
          type: number
          format: double
          description: |-
            The swap points that must be added to the ask spot rate and
            represent the ask all-in-rate for the outright. A positive value
            represents a premium, a negative value a discount.

    FxInstrumentRate:
      type: object
      description: |-
        Describes an FX instrument that can either represent the spot instrument
        or an outright.

        If only the `allInRate` property is available this represent a spot
        instrument. For an outright instrument the `spotRate` and `swapPoints`
        properties are set. Adding the swap points to the spot rate
        mathematically will give you the all-in-rate, this applies to both the
        bid or ask price.
      properties:
        currencyPair:
          $ref: '#/components/schemas/CurrencyPair'
        spotRate:
          $ref: '#/components/schemas/FxRate'
        swapPoints:
          $ref: '#/components/schemas/SwapPoints'
        allInRate:
          $ref: '#/components/schemas/FxRate'
        settlementDate:
          type: string
          format: date
          description: |-
            The date that a transfer of an amount associated with a trade is
            completed on the customer accounts. The order is placed at the
            moment this rate is provided.
      required:
        - currencyPair
        - allInRate
      example:
        currencyPair: EURJPY
        spotRate:
          bidRate: 128.53
          askRate: 128.57
          midRate: 128.55
          effectiveDateTime: '2018-11-07T10:03:07.324Z'
        swapPoints:
          bidPoints: 0.02
          askPoints: 0.02
        allInRate:
          bidRate: 128.55
          askRate: 128.59
          midRate: 128.57
          effectiveDateTime: '2018-11-07T10:03:07.325Z'
        settlementDate: '2018-11-09'

    FxRequest:
      type: object
      description: |-
        Describes an FX request that can be used for both placing an FX
        spot or outright order, or for a request for quote. A request must
        always contain the buy and sell currency and either the buy amount or
        the sell amount.
      properties:
        buyCurrency:
          $ref: '#/components/schemas/Currency'
        sellCurrency:
          $ref: '#/components/schemas/Currency'
        buyAmount:
          $ref: '#/components/schemas/Amount'
        sellAmount:
          $ref: '#/components/schemas/Amount'
        settlement:
          type: string
          pattern: '^SPOT$|^TODAY$|^TOMORROW$|^ASAP$'
          default: SPOT
          description: |-
            An instruction for when the settlement of the FX instrument must
            take place. If this property is omitted it defaults to 'SPOT'
            which means the settlement takes place two business days from now or
            one business day for specific currency pairs such as USD/CAD.

            A value of `TODAY` indicates that settlement over the accounts
            involved must take place today.

            A value of `TOMORROW` indicates that settlement over the accounts
            involved must take place 1 business day from now. Depending on the
            currency pairs involved this can turn out to be a `SPOT` request, if
            this is the case it will be treated as such.

            The `ASAP` (As Soon As Possible) tenor equals the `TODAY` tenor,
            except when the daily cutoff has been reached or there is a bank
            holiday effective, in that case `TOMORROW` will be effective. Using
            this tenor prevents clients to have to build logic that checks
            whether settlement can take place today.
      required:
        - buyCurrency
        - sellCurrency
      example:
        buyCurrency: EUR
        sellCurrency: USD
        sellAmount: 25000

    FxOrder:
      type: object
      description: |-
        Describes the FX spot or outright order, containing the original request
        data and the order execution data, data available depends on the status
        of the order.

        Based upon the buy and sell currency in the original request, a currency
        pair is constructed that is used for obtaining the applicable rates. In
        case the order has the status `FILLED` all the pricing related
        information will be provided. In case of an FX spot only the `allInRate`
        property will be set, in case of an FX outright the `spotRate`,
        `swapPoints` and `allInRate` properties are set.
      properties:
        orderId:
          type: string
          format: uuid
          maxLength: 36
          description: |-
            The unique identifier for this order.
        submittedDateTime:
          type: string
          format: date-time
          readOnly: true
          description: |-
            The date and time the FX spot or outright request has been
            submitted, the time component will include milliseconds and is in
            UTC time.
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        message:
          type: string
          maxLength: 512
          description: |-
            Optional message from the service provider related to this order. If
            an order has been rejected or went into intervention, this property
            will explain the reason.

            The message can contain standardized codes, for the meaning of these
            codes and the action to take consult the
            [documention](https://developer.abnamro.com/api/fxtrade-v1/technical#codes).
        consumerOrderReference:
          type: string
          pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
          maxLength: 128
          description: |-
            The customer reference for the FX spot or outright order, which can
            be used later on to correlate the FX spot order.
        buyCurrency:
          $ref: '#/components/schemas/Currency'
        sellCurrency:
          $ref: '#/components/schemas/Currency'
        buyAmount:
          $ref: '#/components/schemas/Amount'
        sellAmount:
          $ref: '#/components/schemas/Amount'
        settlement:
          $ref: '#/components/schemas/Settlement'
        settlementAccountGroup:
          $ref: '#/components/schemas/SettlementAccountGroup'
        quoteId:
          type: string
          format: uuid
          maxLength: 36
          readOnly: true
          description: |-
            In case the FX spot or outright order was accompanied by a
            `quoteSignature` this identifier identifies the quote as in
            `GET /v1/fxtrade/quotes/{quoteId}`.

            In other words when this property is set the order was based upon a
            valid quote and the pricing related information matches that of the
            pricing information in the `FxQuote`.
        currencyPair:
          $ref: '#/components/schemas/CurrencyPair'
        spotRate:
          $ref: '#/components/schemas/FxRate'
        swapPoints:
          $ref: '#/components/schemas/SwapPoints'
        allInRate:
          $ref: '#/components/schemas/FxRate'
        filledAmount:
          type: number
          format: double
          minimum: 0
          description: |-
            The filled amount, i.e. the amount ('buy' currency) bought so far in
            case the order contained a buy amount, otherwise the amount ('sell'
            currency) sold so far when the sell amount was specified. In case
            the order is filled this amount must equal the buy or sell amount,
            in case of a partially filled order this value represents the amount
            bought or sold so far.
        contraAmount:
          type: number
          format: double
          minimum: 0
          description: |-
            Represent the contra amount for the filled amount that has been
            converted based upon the rate provided for the given currency pair.
            In case of a sell amount the contra amount is for the buy currency
            and represents the amount bought. In case of a buy amount the contra
            amount is for the sell currency and represents the amount that needs
            to be paid.

            This property is set when the 'orderStatus' is `FILLED`.
        rate:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: |-
            The FX rate effective for the order, this is either the bid or ask
            rate from the 'allInRate' property depending on the direction.

            This property is set when the `orderStatus` is `FILLED`.
        settlementDate:
          type: string
          format: date
          description: |-
            The date that a transfer, of an amount associated with a trade, is
            completed on the customer accounts.
      required:
        - orderId
        - submittedDateTime
        - quoteStatus
        - buyCurrency
        - sellCurrency
        - settlement
      example:
        orderId: 123e4567-e89b-12d3-a456-556642440000
        submittedDateTime: '2018-11-05T10:03:08.103Z'
        orderStatus: FILLED
        consumerOrderReference: SP-20181105-175
        buyCurrency: EUR
        sellCurrency: USD
        sellAmount: 1000.50
        settlement: SPOT
        settlementAccountGroup: House Account
        quoteId: 273ef567-a79b-40a3-c453-036142340417
        currencyPair: EURUSD
        allInRate:
          bidRate: 1.1460
          askRate: 1.1468
          midRate: 1.1464
          effectiveDateTime: '2018-11-05T10:03:06.324Z'
        filledAmount: 1000.50
        contraAmount: 872.43
        rate: 1.1468
        settlementDate: '2018-11-07'

    FxQuote:
      type: object
      description: |-
        Describes the FX spot or outright quote, containing the original request
        data and the order execution data, data available depends on the status
        of the order.

        Based upon the buy and sell currency in the original request, a currency
        pair is constructed that is used for obtaining the applicable rates. In
        case the quote has the status `QUOTED` or `EXPIRED` all the pricing
        related information will be provided as well as the `quoteSignature`.
        In case of an FX spot only the `allInRate` property will be set, in case
        of an FX outright the `spotRate`, `swapPoints` and `allInRate`
        properties are set.

        The `quoteSignature` represents a unique identification of the `FxQuote`
        that must be provided by the client when it wants to perform an order
        based upon that quote.
      properties:
        quoteId:
          type: string
          format: uuid
          maxLength: 36
          description: |-
            The unique identifier for this quote.
        submittedDateTime:
          type: string
          format: date-time
          readOnly: true
          description: |-
            The date and time the FX spot or outright request has been
            submitted, the time component will include milliseconds and is in
            UTC time.
        quoteStatus:
          $ref: '#/components/schemas/QuoteStatus'
        expirationDateTime:
          type: string
          format: date-time
          description: |-
            The date and time till the FX spot or outright quote is valid, i.e.
            after the expiration date and time (as viewed by the service
            provider) no FX spot order can be placed with this quote as a
            reference. The time component will include milliseconds and is in
            UTC time.

            The time duration of this quote is the difference between the
            `expirationDateTime` and the `submittedDateTime`.

            This property is set when the `quoteStatus` is `QUOTED` or
            `EXPIRED`.
        message:
          type: string
          maxLength: 512
          description: |-
            Optional message from the service provider related to this quote. If
            a quote has been rejected or went into intervention, this property
            will explain the reason.

            The message can contain standardized codes, for the meaning of these
            codes and the action to take consult the
            [documention](https://developer.abnamro.com/api/fxtrade-v1/technical#codes).
        consumerQuoteReference:
          type: string
          pattern: '^[\w !"#$%&''()*+,-.\/:;<=>?@\[\]\\^_`{|}~]*$'
          maxLength: 128
          description: |-
            The customer reference for the FX spot or outright quote, which can
            be used later on to correlate the FX spot quote.
        buyCurrency:
          $ref: '#/components/schemas/Currency'
        sellCurrency:
          $ref: '#/components/schemas/Currency'
        buyAmount:
          $ref: '#/components/schemas/Amount'
        sellAmount:
          $ref: '#/components/schemas/Amount'
        settlement:
          $ref: '#/components/schemas/Settlement'
        settlementAccountGroup:
          $ref: '#/components/schemas/SettlementAccountGroup'
        currencyPair:
          $ref: '#/components/schemas/CurrencyPair'
        spotRate:
          $ref: '#/components/schemas/FxRate'
        swapPoints:
          $ref: '#/components/schemas/SwapPoints'
        allInRate:
          $ref: '#/components/schemas/FxRate'
        contraAmount:
          type: number
          format: double
          minimum: 0
          description: |-
            Represents the contra amount for the sell or buy amount. This can be
            converted with the rate provided for the given currency pair as part
            of this quote. In the case of a sell amount, the contra amount is
            for the buy currency and represents the amount bought. In case of a
            buy amount, the contra amount is for the sell currency and
            represents the amount that must be paid.

            This property is set when the `quoteStatus` is `QUOTED` or
            `EXPIRED`.
        rate:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: |-
            The FX rate effective for the quote, this is either the bid or ask
            rate from the `allInRate` property depending on the direction.

            This property is set when the `quoteStatus` is `QUOTED` or
            `EXPIRED`.
        settlementDate:
          type: string
          format: date
          description: |-
            The date that a transfer, of an amount associated with a trade
            performed for this quote, is completed on the customer accounts.
        quoteSignature:
          $ref: '#/components/schemas/QuoteSignature'
      required:
        - quoteId
        - submittedDateTime
        - quoteStatus
        - buyCurrency
        - sellCurrency
        - settlement
        - settlementAccountGroup
      example:
        quoteId: 2a3e4567-a79b-40a3-a456-036142440410
        submittedDateTime: '2018-11-07T10:03:08.519Z'
        quoteStatus: QUOTED
        expirationDateTime: '2018-11-07T10:03:13.519Z'
        consumerQuoteReference: SP-20181107-176
        buyCurrency: JPY
        sellCurrency: EUR
        buyAmount: 1000000
        settlement: TODAY
        settlementAccountGroup: House Account
        currencyPair: EURJPY
        spotRate:
          bidRate: 128.53
          askRate: 128.57
          midRate: 128.55
          effectiveDateTime: '2018-11-07T10:03:07.324Z'
        swapPoints:
          bidPoints: 0.02
          askPoints: 0.02
        allInRate:
          bidRate: 128.55
          askRate: 128.59
          midRate: 128.57
          effectiveDateTime: '2018-11-07T10:03:07.325Z'
        contraAmount: 7779.07
        rate: 128.55
        settlementDate: '2018-11-07'
        quoteSignature: 'DET/IEOl3+ohSNqr0l1RywOkyqgjZ1JkGxxHxFkyHux6UUP71ybU6t4QWPg1dZ8NazY++v9nBP1+a3yKBRzMVK94QmwgHhWYTyO6f6iXj9VGKN2LH/qhAI2yzPz4DEAKCbc6H1ssw3yUT1QhAA=='

    Error:
      type: object
      description: Describes an error as result of a service request.
      properties:
        code:
          type: string
          description: Unique Error code.
        message:
          type: string
          description: Error message.
        status:
          type: integer
          description: |-
            HTTP status code according to
            [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6)
        reference:
          type: string
          description: URI to an information resource for this error.
        traceId:
          type: string
          description: |-
            Unique ID generated for every request. It will be used to trace
            errors. Its value is same as `Trace-Id` in response header.
      required:
        - code
        - message
        - status
        - traceId
      example:
        code: 'ERR_1002_003'
        message: 'API Key Header missing'
        status: 401
        reference: 'https://developer.abnamro.com/get-started#error-handling'
        traceId: '6fda2ce8-225d-4ca2-920a-b687c7aeb2f3'

    Errors:
      type: object
      description: |-
        Extra information to the REST client in case of erroneous situations
        (HTTP status codes 4xx/5xx).
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 99
          items:
            $ref: '#/components/schemas/Error'
      required:
        - errors

  parameters:
    currencyPair:
      in: path
      name: currencyPair
      required: true
      schema:
        type: string
        minLength: 6
        maxLength: 6
        pattern: '^[A-Z]{6}$'
      description: |-
        A currency pair represented by the combination of 2 ISO 4217 currency
        codes of the format `XXXYYY`, where `XXX` represents the base currency
        and `YYY` the quote currency. There is no separator between the base and
        quote currency. The currency pair is all capitals.
    currencyPairs:
      in: query
      name: currencyPairs
      required: true
      schema:
        type: array
        minItems: 1
        items:
          type: string
          minLength: 6
          maxLength: 6
          pattern: '^[A-Z]{6}$'
      style: form
      explode: false
      description: |-
        A comma separated list of currency pairs which will limit the FX rates
        returned. See the resource CurrencyPair for the requirements.
    fxRateTenor:
      in: query
      name: fxRateTenor
      required: false
      schema:
        type: string
        enum:
          - SPOT
          - TODAY
          - TOMORROW
          - ASAP
        default: SPOT
      description: |-
        Indicates the tenor to use for the FX rate to be obtained.

        The options of `TODAY` and `TOMORROW` will indicate that the rate for an
        outright is requested, although in case of `TOMORROW` it is also
        possible it equals `SPOT` in case T+1 settlement is effective for that
        currency pair.

        The `ASAP` (As Soon As Possible) tenor equals the `TODAY` tenor, except
        when the daily cutoff has been reached or there is a bank holiday
        effective, in that case `TOMORROW` will be effective.
    nextPageKey:
      in: query
      name: nextPageKey
      required: false
      schema:
        type: string
      description: |-
        The reference to the next page. The value for this parameter should be
        taken from the `nextPageKey` property in the response from the previous
        request. For consistent behavior the query parameters should not change
        during traversal of the result set.
    pageSize:
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 5000
        default: 100
      description: |-
        The maximum number of records returned in the result set, the
        service is permitted to return a number that is less than this value. If
        a very small small number is chosen the service is also permitted to
        return more records to be able to provide a consistent view over the
        complete result set when traversing via the `nextPageKey`.
    orderId:
      in: path
      name: orderId
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 36
      description: The unique reference for this order.
      example: 123e4567-e89b-12d3-a456-556642440000
    quoteId:
      in: path
      name: quoteId
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 36
      description: The unique reference for this quote.
      example: 2a3e4567-a79b-40a3-a456-036142440410

  responses:
    '400':
      description: |-
        Bad Request.

        Validation errors or missing data in request, whether an error code can
        be returned depends on the method of the operation. Possible error
        codes:

        - `REQUEST_BODY_INVALID`: in case the request body can not be parsed.
          Only applicable to the `POST` operations;
        - `PATH_PARAMETER_INVALID`: provided path parameter is invalid, the
          message will provide details about the path parameter being invalid;
        - `QUERY_PARAMETER_MISSING`: mandatory query parameter is missing, the
          message will provide details about the missing parameter;
        - `QUERY_PARAMETER_INVALID`: provided query parameter is invalid, the
          message will provide details about the parameter being invalid;
        - `PROPERTY_MISSING`: mandatory request body property is missing, the
          message will provide details about the missing property. Only
          applicable to the `POST` operations;
        - `PROPERTY_INVALID`: provided request body property is invalid, the
          message will provide details about the property being invalid. Only
          applicable to the `POST` operations;
        - `ERR_1002_003`: API Key Header missing.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'PROPERTY_MISSING'
                message: "property 'sellCurrency' is required"
                status: 400
                traceId: '0b9ad304-0467-4ec2-a1f9-8f2f685dec8e'
              - code: 'PROPERTY_INVALID'
                message: "property 'sellAmount' with value '0' is not a valid positive amount"
                status: 400
                traceId: '0b9ad304-0467-4ec2-a1f9-8f2f685dec8e'
    '401':
      description: |-
        Unauthorized.

        Possible error codes:

        - `ERR_2002_003`: the presented access token is not valid or expired;
        - `ERR_2005_001`: invalid API Key.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
        WWW-Authenticate:
          schema:
            type: string
          description: |-
            indicates the authentication scheme(s) and parameters applicable to
            the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'ERR_2005_001'
                message: invalid API Key
                status: 401
                traceId: 'eec6b4c7-6b2f-477b-85fa-2d8dd1a07c4f'
    '403':
      description: |-
        Forbidden.

        Possible error codes:

        - `ERR_3002_003`: request is authenticated but the scope of the token is
          insufficient to access the resource.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'ERR_3002_003'
                message: 'Insufficient scope of the token, token cannot be used for this call'
                status: 403
                traceId: '128b4aa8-3848-46e2-9d23-6dd41212210f'
    '404':
      description: |-
        Not Found.

        Possible error codes:

        - `RESOURCE_NOT_FOUND`: the requested resource does not exist.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'RESOURCE_NOT_FOUND'
                message: "requested resource with identifier '01695364-1806-491e-ac41-0eed454afa4b' not found"
                status: 404
                traceId: '8698e7fe-2506-4633-a9fd-96fb8c2ca233'
    '406':
      description: |-
        Not Acceptable.

        Possible error codes:

        - `ACCEPT_HEADER_INVALID`: the target resource does not have a current
          representation as requested by the 'Accept' header.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'ACCEPT_HEADER_INVALID'
                message: "the service only support the 'application/json' content for this resource so use an 'Accept' header that allows for that type to be returned"
                status: 406
                traceId: '43629ec3-10a2-449a-ba87-2686f7f2e027'
    '415':
      description: |-
        Unsupported Media Type.

        Possible error codes:

        - `CONTENT_TYPE_INVALID`: the 'Content-Type' of the supplied request
          body is not supported.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'CONTENT_TYPE_INVALID'
                message: "the service only support the 'application/json' content in the request body so use a 'Content-Type' header specifying this type"
                status: 415
                traceId: 'acb5d53c-3b67-41b2-9200-b20bc3cb8733'
    '429':
      description: |-
        Too Many Requests.

        Possible error codes:

        - `ERR_7001_001`: quota for call exceeded;
        - `ERR_7002_001`: spikes in API call.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'ERR_7001_001'
                message: "quota for call exceeded"
                status: 429
                traceId: 'b3637ef6-0674-46ab-9aa7-246dd3b4ed88'
    '500':
      description: |-
        Internal Server Error.

        Possible error codes:

        - `INTERNAL_SERVER_ERROR`: an unexpected internal failure failure
          occurred. The issue has been reported to the DevOps Team and is being
          investigated.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'INTERNAL_SERVER_ERROR'
                message: "an unexpected internal failure happened for the service, problem has been reported to DevOps team and being investigated"
                status: 503
                traceId: '95a97437-2ecc-4bf7-8d44-b49710ad5bd1'
    '503':
      description: |-
        Service Unavailable.

        Possible error codes:

        - `SERVICE_UNAVAILABLE`: this service is currently unavailable, check
          the 'Retry-After' header to check when the service will be available
          again.
      headers:
        Trace-Id:
          $ref: '#/components/headers/Trace-Id'
        Retry-After:
          schema:
            type: integer
            minimum: 0
          description: |-
            Indicates how long the user agent should wait, in seconds, before
            making a follow-up request as the service is expected to be
            unavailable to the client.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          example:
            errors:
              - code: 'SERVICE_UNAVAILABLE'
                message: "the service is currently not available, check the 'Retry-After' header for expected moment the service will be available"
                status: 503
                traceId: 'a0ab3933-c26d-48eb-9ed6-976f1b10c5a7'

  headers:
    Trace-Id:
      description: Unique ID generated for every request.
      schema:
        type: string
